#define pi 3.14159265

uniform mat4 world : World;
uniform mat4 viewInv : ViewInverse;
uniform mat4 viewMat : View;
uniform mat4 projMat : Projection;
uniform mat4 wvp : WorldViewProjection;
uniform mat4 viewPrj : ViewProjection;

// Uniforms
uniform float furLength <
string UIName = "Fur Length";
string UIGroup = "Fur Parameters";
> = 0;

uniform int lengthLayers <
string UIName = "Length Layers";
string UIGroup = "Fur Parameters";
float UIMin = 1;
float UIMax = 10;
float UIStep = 1;
> = 10;

uniform int densityLayers <
string UIName = "Density Layers";
string UIGroup = "Fur Parameters";

float UIMin = 1;
float UIMax = 3;
float UIStep = 1;
> = 1;

uniform vec3 forceIn <
string UIName = "Force";
string UIGroup = "Fur Parameters";
> = {0.0f, -2.0f, 0.0f};

uniform bool useTexture <
string UIName = "Use texture";
string UIGroup = "Fur Parameters";
> ;

uniform texture2D furTexture <
string ResourceName = "FurTexture.png";
string ResourceType = "2D";
string UIName = "Fur Texture";
string UIGroup = "Fur Parameters";
> ;

uniform float uvScale : UVScale <
string UIName = "UV Scale";
string UIGroup = "Fur Parameters";
> = 1.0f;

uniform sampler2D textureSampler = sampler_state {
	Texture = <furTexture>;
};

uniform vec3 furColorIn : DIFFUSE <
string UIName = "Hair Color";
string UIGroup = "Fur Parameters";
string UIWidget = "ColorPicker";
> = {0.286, 0.121, 0.09};

uniform float transparency : Transparency <
string UIName =
		"Transparency Depth";
string UIGroup = "Fur Parameters";
float UIMin = 0.5f;
> = 0.f;

// Length Noise

uniform float lengthNoiseLevel : lengthNoiseLevel <
string UIName =
		"Noise Level";
float UIMin = 1;
float UIMax = 5;
string UIGroup = "Length Noise";
> = 1.0f;

uniform float lengthNoiseFrequency : lengthNoiseFrequency <
string UIName =
		"Noise Frequency";
float UIMin = 1;
float UIMax = 5;
string UIGroup = "Length Noise";
> = 1.0f;

uniform float lengthNoiseAmplitude : lengthNoiseAmplitude <
string UIName =
		"Noise Amplitude";
float UIMin = 1;
float UIMax = 5;
string UIGroup = "Length Noise";
> = 1.0f;

uniform float lengthNoiseLacunarity : lengthNoiseLacunarity <
string UIName =
		"Noise Lacunarity";
float UIMin = 1;
float UIMax = 5;
string UIGroup = "Length Noise";
> = 1.0f;

uniform float lengthNoisePersistence : lengthNoisePersistence <
string UIName =
		"Noise Persistence";
float UIMin = 1;
float UIMax = 5;
string UIGroup = "Length Noise";
> = 1.0f;

// Direction Noise

uniform float directionNoiseLevel : directionNoiseLevel <
string UIName =
		"Noise Level";
float UIMin = 1;
float UIMax = 5;
string UIGroup = "Direction Noise";
> = 1.0f;

uniform float directionNoiseFrequency
		: directionNoiseFrequency <
string UIName = "Noise Frequency";
float UIMin = 1;
float UIMax = 5;
string UIGroup = "Direction Noise";
> = 1.0f;

uniform float directionNoiseAmplitude
		: directionNoiseAmplitude <
string UIName = "Noise Amplitude";
float UIMin = 1;
float UIMax = 5;
string UIGroup = "Direction Noise";
> = 1.0f;

uniform float directionNoiseLacunarity
		: directionNoiseLacunarity <
string UIName = "Noise Lacunarity";
float UIMin = 1;
float UIMax = 5;
string UIGroup = "Direction Noise";
> = 1.0f;

uniform float directionNoisePersistence
		: directionNoisePersistence <
string UIName = "Noise Persistence";
float UIMin = 1;
float UIMax = 5;
string UIGroup = "Direction Noise";
> = 1.0f;

// Lighting

uniform bool useKayja <
string UIName = "Use Kayja lighting";
string UIGroup = "Lighting";
> = true;

uniform vec3 light0Pos : light0Position <
string UIName = "Light Position";
string UIGroup = "Lighting";
> = {0.0f, 4.0f, 6.0f};

uniform vec3 light1Pos : light1Position <
string UIName = "Light Position";
string UIGroup = "Lighting";
> = {0.0f, 4.0f, -6.0f};

uniform vec3 light2Pos : light1Position <
string UIName = "Light Position";
string UIGroup = "Lighting";
> = {4.0f, 4.0f, -10.0f};

uniform vec3 light3Pos : light1Position <
string UIName = "Light Position";
string UIGroup = "Lighting";
> = {-4.0f, 4.0f, 0.0f};

uniform float diffuseIntensity : DiffuseIntensity <
string UIName =
		"Diffuse Intensity";
string UIGroup = "Lighting";
> = 0.5f;

uniform float specularIntensity : SpecularIntensity <
string UIName =
		"Specular Intensity";
string UIGroup = "Lighting";
> = 0.8f;

uniform float lightShininess : Shininess <
string UIName = "Shininess";
string UIGroup = "Lighting";
> = 1.0f;
	
attribute vsIn {
	vec3 position : POSITION;
	vec3 normal : NORMAL;
	vec4 texCoordDiffuse : TEXCOORD0;
};

// Output structure
attribute DATA {
	vec4 hairPos : POSITION;
	vec3 normal : NORMAL;
	vec4 T0 : TEXCOORD0;
};

attribute psOut {
	vec4 colorOut : COLOR0;
}

GLSLShader VS_Hair {
	void main() {
		// Transform the vertex position into world space
		vec3 normal = normalize((world * vec4(normal, 0.0f)).xyz);
		vec4 worldPos = world * vec4(position, 1.0f);

		vsOut.hairPos = worldPos;
		vsOut.T0 = texCoordDiffuse * uvScale;
		vsOut.normal = normal;
	}
}

GLSLShader GS_Hair {
	layout(triangles) in;
	layout(line_strip, max_vertices = 63) out;

	// Simplex noise functions
	int fastFloor(float FP) {
		int i = int(FP);
		return (FP < float(i)) ? (i - 1) : (i);
	}

	const int GPerm[256] = int[256](
			151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225,
			140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247,
			120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177,
			33, 88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165,
			71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211,
			133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25,
			63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196,
			135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217,
			226, 250, 124, 123, 5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206,
			59, 227, 47, 16, 58, 17, 182, 189, 28, 42, 223, 183, 170, 213, 119, 248,
			152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9, 129, 22,
			39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218,
			246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241,
			81, 51, 145, 235, 249, 14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157,
			184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254, 138, 236, 205, 93,
			222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180);

	int hash(int I) { return GPerm[I & 255]; }

	float gradient(int hash, float X, float Y) {
		int h = hash & 0x3F;
		float u = h < 4 ? X : Y;
		float v = h < 4 ? Y : X;
		return ((h & 1) != 0 ? -u : u) + ((h & 2) != 0 ? -2.0 * v : 2.0 * v);
	}

	float pointContribution(int I, int j, float X, float Y) {
		float t = 0.5 - X * X - Y * Y;
		if (t < 0.0) {
			return 0.0;
		} else {
			int GI = hash(I + hash(j));
			t *= t;
			return t * t * gradient(GI, X, Y);
		}
	}

	float simplexNoise(float X, float Y, float frequency, float amplitude,
										 float lacunarity, float persistence) {
		// Lacunarity is a multiplier to frequency for each layer, persistence is a
		// multiplier to amplitude for each layer
		float total = 0.0;
		const float G2 = 0.211324865;
		const float F2 = 0.366025403;

		for (int i = 0; i < 4; ++i) {
			float x = X * frequency;
			float y = Y * frequency;
			float s = (x + y) * F2;
			int IFast = fastFloor(x + s);
			int j = fastFloor(y + s);
			float t = float(IFast + j) * G2;
			float X0 = x - (IFast - t);
			float Y0 = y - (j - t);
			int I1 = X0 > Y0 ? 1 : 0;
			int J1 = X0 > Y0 ? 0 : 1;
			float N0 = pointContribution(IFast, j, X0, Y0);
			float N1 =
					pointContribution(IFast + I1, j + J1, X0 - I1 + G2, Y0 - J1 + G2);
			float N2 = pointContribution(IFast + 1, j + 1, X0 - 1.0 + 2.0 * G2,
																	 Y0 - 1.0 + 2.0 * G2);
			total += (N0 + N1 + N2) * amplitude;
			frequency *= lacunarity;
			amplitude *= persistence;
		}
		return total;
	}

	// End of Simplex noise functions

	float getRandom(vec2 st) {
		return fract(sin(dot(st.xy, vec2(12.9898, 78.233))) * 43758.5453123);
	}

	void main() {
		vec3 prevTimePos, prevBasePos, basePos, prevPos;
		float transparencyOffset, rgbOffset;
		int i;

		transparencyOffset = 0.0f;

		if (lengthLayers == 1) {
			transparencyOffset = 0.5f;
			rgbOffset = 0.8f;
		} else {
			transparencyOffset = 1.0f / (lengthLayers);
			rgbOffset = 1.0f / (lengthLayers);
		}

		vec3 force = (world * vec4(-forceIn, 1.0f)).xyz;
		int densityLayersClamped = clamp(densityLayers, 0, 3);
		float clampedTransp = clamp(transparency, 0.35, 1.5);
		float alphaAcc = 1;

		for (i = 0; i < int(densityLayersClamped); i++) {
			vec3 normal = gsIn[i].normal;
			vec3 position = gsIn[i].hairPos.xyz;
			float u = getRandom(normal.xy);
			vec3 dir;
			if (i > 0) {
				dir = cross(normal, (gsIn[i].hairPos.xyz - gsIn[i - 1].hairPos.xyz));
			} else {
				dir = 0.08 * normalize(cross(normal, gsIn[i].hairPos.xyz));
			}
			vec3 randomOffset = u * dir;
			vec3 basePos = position + randomOffset;
			vec4 hairBase = vec4(basePos, 1.0f);


			alphaAcc = 1.0f - clampedTransp * pow(transparencyOffset, 0.2f);

			gl_Position = wvp * hairBase;
			gsOut.hairPos = hairBase;
			vec4 t0 = gsIn[i].T0;
			t0.a = alphaAcc;
			gsOut.T0 = t0;
			gsOut.normal = normal;
			EmitVertex();

			for (int j = 0; j < int(lengthLayers); j++) {
				float t = j + 1;
				float forcePower = 0.01;
				vec2 noiseOffset = vec2(t, t);
				vec3 forceAcc = -vec3(1.0f) * t * forcePower * force * force * furLength;

				// Simplex noise values
				float lengthNoise =
						simplexNoise(basePos.x + noiseOffset.x, basePos.y + noiseOffset.y,
												 lengthNoiseFrequency, lengthNoiseAmplitude,
												 lengthNoiseLacunarity, lengthNoisePersistence);
				float noiseFurLength =
						furLength * (1 + lengthNoise * lengthNoiseLevel) * t * 0.5;

				float directionNoise =
						simplexNoise(basePos.x + noiseOffset.x, basePos.y + noiseOffset.y,
												 directionNoiseFrequency, directionNoiseAmplitude,
												 directionNoiseLacunarity, directionNoisePersistence);

				normal = normalize(mul(vec4(gsIn[i].normal, 1.0f), world)).xyz;

				vec3 noiseNormal = normal * (1 + directionNoise * directionNoiseLevel);
				vec3 P1 = basePos + (noiseNormal * noiseFurLength) + forceAcc;
				vec4 hairPos = vec4(P1, 1.0f);

				gl_Position = wvp * hairPos;
				gsOut.hairPos = hairPos;
				vec4 t0 = gsIn[j].T0;
				t0.a = alphaAcc;
				t0.rgb = t0.rgb * rgbOffset;
				gsOut.T0 = t0;
				gsOut.normal = normal;
				EmitVertex();

				basePos = P1; // Next strand will start where the previous one ended

				alphaAcc = alphaAcc - clampedTransp * pow(transparencyOffset, 0.1f);
				rgbOffset = rgbOffset + 0.15;
				rgbOffset = min(rgbOffset, 1.0f);
			}

			EndPrimitive();
		}
	}
}

GLSLShader PS_Hair {
	vec3 calcLight(vec4 colorIn, vec3 furColour, vec3 fragPos, vec3 normal,
								 vec3 lightPos) {
		// Diffuse component (Phong)
		vec3 lightDir = normalize(lightPos - fragPos);
		float diffuseTerm = clamp((max(dot(normal, lightDir), 0.0f)), 0.0f, 1.0f);
		vec3 diffuse = furColour * diffuseIntensity * diffuseTerm;

		// If Kayja lighting model is enabled, calculate  diffuse component
		if (useKayja){
			vec3 absnormal = abs(normal);
			float absMax = max(absnormal.x, max(absnormal.y, absnormal.z));
			vec3 v = normal * step(absMax, absnormal);
			vec3 tangent1 = normalize(cross(normal, v));
			float thetaCos = dot(tangent1, lightDir);
			float thetaSin = sqrt(1 - pow(thetaCos, 2));
			diffuse = diffuse * thetaSin;
		}

		// Specular component (Phong)
		float shininess = clamp(lightShininess, 0.1f, 1.0f);
		const float energyConservation = (2.0 + shininess) / (2.0 * pi);
		vec3 H = normalize(lightDir + normalize(-fragPos));
		float specularTerm =
				energyConservation * pow(max(dot(normal, H), 0.0f), shininess);
		vec3 specular = furColour * specularIntensity * specularTerm;

		vec3 color = diffuse + specular;

		return color;
	}

	void main() {
		vec4 colorIn = psIn.T0;
		vec3 furColour;
		float alpha = colorIn.a;
		if (alpha < 0.0f || alpha > 1.0f)
			discard;

		if (useTexture)
			furColour = texture2D(textureSampler, colorIn.xy).rgb;
		else
			furColour = furColorIn.rgb;

		vec3 fragPos = psIn.hairPos.xyz;
		vec3 normal = psIn.normal;
		vec3 color = calcLight(colorIn, furColour, fragPos, normal, light0Pos);

		color += calcLight(colorIn, furColour, fragPos, normal, light1Pos);
		color += calcLight(colorIn, furColour, fragPos, normal, light2Pos);
		color += calcLight(colorIn, furColour, fragPos, normal, light3Pos);

		colorOut = vec4(color, 1.0f) * alpha;
	}
}

GLSLShader VS_SolidColour {
	void main() {
		vsOut.T0 = texCoordDiffuse * uvScale;
		gl_Position = wvp * vec4(position, 1);
	}
}

GLSLShader PS_SolidColour {
	void main() {
		vec4 colorIn = psIn.T0;
		vec4 furColour = texture2D(textureSampler, colorIn.xy);
		colorOut = vec4(furColour.rgb, 1.0f) * 1.0f;
	}
}

technique FurRendering <
string Transparency = "Transparent";
> {
	pass p0 {
		VertexShader(in vsIn, out DATA vsOut) = VS_Hair;
		GeometryShader(in DATA gsIn, out DATA gsOut) = GS_Hair;
		PixelShader(in DATA psIn, out psOut) = PS_Hair;
	}
}
